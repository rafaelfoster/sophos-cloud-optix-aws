{
  "AWSTemplateFormatVersion": "2010-09-09",
   "Parameters": {
    "AmiName": {
      "Description": "Name of the AWS AMI IN THIS REGION.",
      "Type": "String",
      "MinLength": "12",
      "MaxLength": "21",
      "Default": "ami-035be7bafff33b6b6",
      "AllowedPattern": "ami-.*",
      "ConstraintDescription": "must start with ami-*"
    },
    "SubnetAZa": {
      "Description": "First Availability Zone of the Subnets",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "SubnetAZb": {
      "Description": "Second Availability Zone of the Subnets",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "SubnetAZc": {
      "Description": "Third Availability Zone of the Subnets",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "TrustedIp": {
      "Type": "String",
      "Default": "0.0.0.0/0"
    }
  },
  "Resources": {
    "privateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Ref": "SubnetAZa"
        },
        "CidrBlock": "10.10.1.0/24",
        "VpcId": {
          "Ref": "ProdVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Prod Private"
          },
          {
            "Key": "env",
            "Value": "prod"
          }
        ]
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Ref": "SubnetAZa"
        },
        "CidrBlock": "10.10.2.0/24",
        "VpcId": {
          "Ref": "ProdVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Prod Public"
          },
          {
            "Key": "env",
            "Value": "prod"
          }
        ]
      }
    },
    "WebappSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "WebApp security group",
        "VpcId": {
          "Ref": "ProdVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "TrustedIp"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "TrustedIp"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "TrustedIp"
            }
          }
        ]
      }
    },
    "S3Bucket1": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
                }
            },
    "S3BucketPolicy1": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "MyPolicy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "Put",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Action": "s3:GetObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "S3Bucket1"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Bucket": {
                    "Ref": "S3Bucket1"
                }
            }
        },
        "S3Bucket2": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
              "AccessControl": "Private"
              }
          },
        "S3BucketPolicy2": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
              "PolicyDocument": {
                  "Id": "MyPolicy",
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Sid": "Put",
                          "Effect": "Allow",
                          "Principal": "*",
                          "Action": "s3:GetObject",
                          "Resource": {
                              "Fn::Join": [
                                  "",
                                  [
                                      "arn:aws:s3:::",
                                      {
                                          "Ref": "S3Bucket2"
                                      },
                                      "/*"
                                  ]
                              ]
                          }
                      }
                  ]
              },
              "Bucket": {
                  "Ref": "S3Bucket2"
              }
            }
          },
         "bthlambdauser" : {
          "Type" : "AWS::IAM::User",
          "Properties" : {
            "LoginProfile": {
              "Password": "AZkt5j8HbnM9zaybv8L9"
            }
          }
        },
        "bthlambdauserKeys" : {
          "Type" : "AWS::IAM::AccessKey",
          "Properties" : {
            "UserName" : { "Ref": "bthlambdauser" }
          }
        },
        "bthec2role" : {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName" : "bthec2role", 
            "AssumeRolePolicyDocument": {
                "Statement": [{
                   "Effect": "Allow",
                   "Principal": {
                      "Service": ["ec2.amazonaws.com"]
                   },
                   "Action": ["sts:AssumeRole"]
                }]
             },
             "Path": "/"
          }
       },
      "bthlambdauserpolicyv1" : {
        "Type" : "AWS::IAM::ManagedPolicy",
        "Properties" : {
            "ManagedPolicyName" : "bthlambdauserpolicy",
            "Path" : "/",
            "PolicyDocument" : 
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect"   : "Allow",
                "Action"   : [
                      "iam:Get*",
                      "iam:List*",
                      "iam:SetDefaultPolicyVersion"
                  ],
                "Resource" : "*"
              }]
            },
            "Users" : [{ "Ref" : "bthlambdauser" }]
          }
      },
      "bthec2rolepolicyv1" : {
        "Type" : "AWS::IAM::ManagedPolicy",
        "Properties" : {
            "ManagedPolicyName" : "bthec2rolepolicy",
            "Path" : "/",
            "PolicyDocument" : 
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect"   : "Allow",
                "Action"   : [
                  "lambda:InvokeFunction",
                  "lambda:GetAccountSettings",
                  "lambda:ListFunctions",
                  "lambda:ListTags",
                  "lambda:GetEventSourceMapping",
                  "lambda:ListEventSourceMappings",
                  "iam:ListRoles"
              ],
            "Resource" : "*"
          }]
            },
            "Roles": [{ "Ref": "bthec2role" }]
          }
        },
          "bthec2profile": {
          "Type": "AWS::IAM::InstanceProfile",
          "Properties": {
             "Path": "/",
             "Roles": [{ "Ref": "bthec2role" }]
          }
       },
    "bthlambdafunction": {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
          "Handler" : "index.handler",
          "Role" : { "Fn::GetAtt" : ["bthlambdaexecrole", "Arn"] },
          "Code" : {
              "ZipFile" : { "Fn::Join" : [ "\n", [
                  "var response = require('cfn-response');",
                  "exports.handler = function(event, context) {",
                  "    console.log('Received event:');",
                  "    console.log(JSON.stringify(event));",
                  "    var base = event.ResourceProperties.Base;",
                  "    var customId = event.ResourceProperties.Id;",
                  "    var outputData = {};",
                  "    try {",
                  "       if(event.RequestType != 'Delete')",
                  "           outputData.Result = base*5;",
                  "       if(event.RequestType == 'Delete' || outputData.Result == parseInt(outputData.Result, 10))",
                  "           response.send(event, context, response.SUCCESS, outputData, customId);",
                  "       else",
                  "           response.send(event, context, response.FAILED, {}, customId);",
                  "    } catch (e) {",
                  "       console.error(e);",
                  "       response.send(event, context, response.FAILED, { 'error': e }, customId);",
                  "       return",
                  "    }",
                  "}"
              ]]}
          },
          "Timeout" : "10",
          "MemorySize" : "256",
          "Runtime" : "nodejs12.x",
          "Environment" : {
              "Variables" : {
                  "EC2_ACCESS_KEY_ID" : { "Ref" : "bthlambdauserKeys" },
                  "EC2_SECRET_KEY_ID" : { "Fn::GetAtt" : ["bthlambdauserKeys", "SecretAccessKey"]}
              }
            }
      }
  },
  "bthlambdaexecrole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": [
                            "lambda.amazonaws.com"
                        ]
                    },
                    "Action": [
                        "sts:AssumeRole"
                    ]
                }
            ]
        },
        "Path": "/",
        "Policies": [
            {
                "PolicyName": "cwlogs",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": { "Fn::Join" : [":", ["arn:aws:logs", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "*" ]] }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                { "Fn::Join" : [":", ["arn:aws:logs", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "log-group", "/aws/lambda/*", "*" ]] }
                            ]
                        }
                    ]
                }
            }
        ]
    }
},
      "bthwebapp1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Ref": "AmiName"
        },

        "InstanceType": "t2.nano",
        "AvailabilityZone": {
          "Ref": "SubnetAZa"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "bthwebapp1"
          },
          {
            "Key": "env",
            "Value": "prod"
          },
          {
            "Key": "Type",
            "Value": "web_app"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "8"
            }
          }
        ],
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "True",
            "DeleteOnTermination": "True",
            "SubnetId": {
              "Ref": "PublicSubnet"
            },
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "WebappSG"
              }
            ]
          }
        ]
      }
    },
    "bthwebapp2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Ref": "AmiName"
        },

        "InstanceType": "t2.nano",
        "UserData": {
         "Fn::Base64": { "Fn::Join": [ "", [
                "#!/bin/bash -v\n",
                "yum install git --assumeyes \n",
                "git clone https://github.com/sethsec/Nodejs-SSRF-App.git \n",
                "cd Nodejs-SSRF-App/ \n",
                "yum install -y gcc-c++ make \n",
                "curl -sL https://rpm.nodesource.com/setup_12.x | sudo -E bash - \n",
                "yum install -y nodejs \n",
                "npm install http express needle command-line-args \n",
                "node ssrf-demo-app.js \n",
                "}\n"
              ]
            ]
          }
        },
    "AvailabilityZone": {
      "Ref": "SubnetAZa"
    },
    "DisableApiTermination": "false",
     "IamInstanceProfile": {
     "Ref": "bthec2profile"
     },
    "Tags": [
      {
        "Key": "Name",
        "Value": "bthwebapp2"
      },
      {
        "Key": "env",
        "Value": "prod"
      },
      {
        "Key": "Type",
        "Value": "web_app"
      }
    ],
    "BlockDeviceMappings": [
      {
        "DeviceName": "/dev/xvda",
        "Ebs": {
          "VolumeSize": "8"
        }
      }
    ],
    "NetworkInterfaces": [
      {
        "AssociatePublicIpAddress": "True",
        "DeleteOnTermination": "True",
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "DeviceIndex": "0",
        "GroupSet": [
          {
            "Ref": "WebappSG"
          }
        ]
      }
    ]
  }
  },
  "privateSubnetsRT": {
 		"Type": "AWS::EC2::RouteTable",
 		"Properties": {
 			"VpcId": {
 				"Ref": "ProdVPC"
 			},
 			"Tags": [{
 					"Key": "Name",
 					"Value": "private subnets"
 				},
 				{
 					"Key": "env",
 					"Value": "prod"
 				}
 			]
 		}
 	},
 	"privateRoute": {
 		"Type": "AWS::EC2::Route",
 		"Properties": {
 			"RouteTableId": {
 				"Ref": "privateSubnetsRT"
 			},
 			"DestinationCidrBlock": "0.0.0.0/0",
 			"GatewayId": {
 				"Ref": "InternetGetway"
 			}
 		}
 	},
 	"PublicSubnetRT": {
 		"Type": "AWS::EC2::RouteTable",
 		"Properties": {
 			"VpcId": {
 				"Ref": "ProdVPC"
 			},
 			"Tags": [{
 					"Key": "Name",
 					"Value": "public subnets"
 				},
 				{
 					"Key": "env",
 					"Value": "prod"
 				}
 			]
 		}
 	},
 	"publicRoute": {
 		"Type": "AWS::EC2::Route",
 		"Properties": {
 			"GatewayId": {
 				"Ref": "InternetGetway"
 			},
 			"DestinationCidrBlock": "0.0.0.0/0",
 			"RouteTableId": {
 				"Ref": "PublicSubnetRT"
 			}
 		}
 	},
 	"publicSubnetRoute": {
 		"Type": "AWS::EC2::SubnetRouteTableAssociation",
 		"Properties": {
 			"RouteTableId": {
 				"Ref": "PublicSubnetRT"
 			},
 			"SubnetId": {
 				"Ref": "PublicSubnet"
 			}
 		}
 	},
 	"privateSubnetRoute": {
 		"Type": "AWS::EC2::SubnetRouteTableAssociation",
 		"Properties": {
 			"RouteTableId": {
 				"Ref": "privateSubnetsRT"
 			},
 			"SubnetId": {
 				"Ref": "privateSubnet"
 			}
 		}
 	},
 	"InternetGetway": {
 		"Type": "AWS::EC2::InternetGateway",
 		"Properties": {
 			"Tags": [{
 					"Key": "Name",
 					"Value": "productionDG"
 				},
 				{
 					"Key": "env",
 					"Value": "prod"
 				}
 			]
 		}
 	},
 	"ProdVPC": {
 		"Type": "AWS::EC2::VPC",
 		"Properties": {
 			"CidrBlock": "10.10.0.0/16",
 			"EnableDnsHostnames": true,
 			"EnableDnsSupport": true,
 			"Tags": [{
 					"Key": "Name",
 					"Value": "productionVPC"
 				},
 				{
 					"Key": "env",
 					"Value": "prod"
 				}
 			]
 		}
 	},
 	"AttachGateway": {
 		"Type": "AWS::EC2::VPCGatewayAttachment",
 		"Properties": {
 			"VpcId": {
 				"Ref": "ProdVPC"
 			},
 			"InternetGatewayId": {
 				"Ref": "InternetGetway"
 			}
 		}
 	}
  }
 }


